// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DMonkey83/MyFitnessApp/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/DMonkey83/MyFitnessApp/db/sqlc"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateAvailablePlan mocks base method.
func (m *MockStore) CreateAvailablePlan(arg0 context.Context, arg1 db.CreateAvailablePlanParams) (db.Availableworkoutplan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAvailablePlan", arg0, arg1)
	ret0, _ := ret[0].(db.Availableworkoutplan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAvailablePlan indicates an expected call of CreateAvailablePlan.
func (mr *MockStoreMockRecorder) CreateAvailablePlan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAvailablePlan", reflect.TypeOf((*MockStore)(nil).CreateAvailablePlan), arg0, arg1)
}

// CreateAvailablePlanExercise mocks base method.
func (m *MockStore) CreateAvailablePlanExercise(arg0 context.Context, arg1 db.CreateAvailablePlanExerciseParams) (db.Availableplanexercise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAvailablePlanExercise", arg0, arg1)
	ret0, _ := ret[0].(db.Availableplanexercise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAvailablePlanExercise indicates an expected call of CreateAvailablePlanExercise.
func (mr *MockStoreMockRecorder) CreateAvailablePlanExercise(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAvailablePlanExercise", reflect.TypeOf((*MockStore)(nil).CreateAvailablePlanExercise), arg0, arg1)
}

// CreateExercise mocks base method.
func (m *MockStore) CreateExercise(arg0 context.Context, arg1 db.CreateExerciseParams) (db.Exercise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExercise", arg0, arg1)
	ret0, _ := ret[0].(db.Exercise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExercise indicates an expected call of CreateExercise.
func (mr *MockStoreMockRecorder) CreateExercise(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExercise", reflect.TypeOf((*MockStore)(nil).CreateExercise), arg0, arg1)
}

// CreateExerciseLog mocks base method.
func (m *MockStore) CreateExerciseLog(arg0 context.Context, arg1 db.CreateExerciseLogParams) (db.Exerciselog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExerciseLog", arg0, arg1)
	ret0, _ := ret[0].(db.Exerciselog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExerciseLog indicates an expected call of CreateExerciseLog.
func (mr *MockStoreMockRecorder) CreateExerciseLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExerciseLog", reflect.TypeOf((*MockStore)(nil).CreateExerciseLog), arg0, arg1)
}

// CreateExerciseSet mocks base method.
func (m *MockStore) CreateExerciseSet(arg0 context.Context, arg1 db.CreateExerciseSetParams) (db.Exerciseset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExerciseSet", arg0, arg1)
	ret0, _ := ret[0].(db.Exerciseset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExerciseSet indicates an expected call of CreateExerciseSet.
func (mr *MockStoreMockRecorder) CreateExerciseSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExerciseSet", reflect.TypeOf((*MockStore)(nil).CreateExerciseSet), arg0, arg1)
}

// CreateMaxRepGoal mocks base method.
func (m *MockStore) CreateMaxRepGoal(arg0 context.Context, arg1 db.CreateMaxRepGoalParams) (db.Maxrepgoal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMaxRepGoal", arg0, arg1)
	ret0, _ := ret[0].(db.Maxrepgoal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMaxRepGoal indicates an expected call of CreateMaxRepGoal.
func (mr *MockStoreMockRecorder) CreateMaxRepGoal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMaxRepGoal", reflect.TypeOf((*MockStore)(nil).CreateMaxRepGoal), arg0, arg1)
}

// CreateMaxWeightGoal mocks base method.
func (m *MockStore) CreateMaxWeightGoal(arg0 context.Context, arg1 db.CreateMaxWeightGoalParams) (db.Maxweightgoal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMaxWeightGoal", arg0, arg1)
	ret0, _ := ret[0].(db.Maxweightgoal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMaxWeightGoal indicates an expected call of CreateMaxWeightGoal.
func (mr *MockStoreMockRecorder) CreateMaxWeightGoal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMaxWeightGoal", reflect.TypeOf((*MockStore)(nil).CreateMaxWeightGoal), arg0, arg1)
}

// CreateOneOffWorkoutExercise mocks base method.
func (m *MockStore) CreateOneOffWorkoutExercise(arg0 context.Context, arg1 db.CreateOneOffWorkoutExerciseParams) (db.Oneoffworkoutexercise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOneOffWorkoutExercise", arg0, arg1)
	ret0, _ := ret[0].(db.Oneoffworkoutexercise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOneOffWorkoutExercise indicates an expected call of CreateOneOffWorkoutExercise.
func (mr *MockStoreMockRecorder) CreateOneOffWorkoutExercise(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOneOffWorkoutExercise", reflect.TypeOf((*MockStore)(nil).CreateOneOffWorkoutExercise), arg0, arg1)
}

// CreatePlan mocks base method.
func (m *MockStore) CreatePlan(arg0 context.Context, arg1 db.CreatePlanParams) (db.Workoutplan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlan", arg0, arg1)
	ret0, _ := ret[0].(db.Workoutplan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePlan indicates an expected call of CreatePlan.
func (mr *MockStoreMockRecorder) CreatePlan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlan", reflect.TypeOf((*MockStore)(nil).CreatePlan), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockStore) CreateSession(arg0 context.Context, arg1 db.CreateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockStoreMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockStore)(nil).CreateSession), arg0, arg1)
}

// CreateSet mocks base method.
func (m *MockStore) CreateSet(arg0 context.Context, arg1 db.CreateSetParams) (db.Set, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSet", arg0, arg1)
	ret0, _ := ret[0].(db.Set)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSet indicates an expected call of CreateSet.
func (mr *MockStoreMockRecorder) CreateSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSet", reflect.TypeOf((*MockStore)(nil).CreateSet), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateUserProfile mocks base method.
func (m *MockStore) CreateUserProfile(arg0 context.Context, arg1 db.CreateUserProfileParams) (db.Userprofile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserProfile", arg0, arg1)
	ret0, _ := ret[0].(db.Userprofile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserProfile indicates an expected call of CreateUserProfile.
func (mr *MockStoreMockRecorder) CreateUserProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserProfile", reflect.TypeOf((*MockStore)(nil).CreateUserProfile), arg0, arg1)
}

// CreateWeightEntry mocks base method.
func (m *MockStore) CreateWeightEntry(arg0 context.Context, arg1 db.CreateWeightEntryParams) (db.Weightentry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWeightEntry", arg0, arg1)
	ret0, _ := ret[0].(db.Weightentry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWeightEntry indicates an expected call of CreateWeightEntry.
func (mr *MockStoreMockRecorder) CreateWeightEntry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWeightEntry", reflect.TypeOf((*MockStore)(nil).CreateWeightEntry), arg0, arg1)
}

// CreateWorkout mocks base method.
func (m *MockStore) CreateWorkout(arg0 context.Context, arg1 db.CreateWorkoutParams) (db.Workout, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkout", arg0, arg1)
	ret0, _ := ret[0].(db.Workout)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkout indicates an expected call of CreateWorkout.
func (mr *MockStoreMockRecorder) CreateWorkout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkout", reflect.TypeOf((*MockStore)(nil).CreateWorkout), arg0, arg1)
}

// CreateWorkoutLog mocks base method.
func (m *MockStore) CreateWorkoutLog(arg0 context.Context, arg1 db.CreateWorkoutLogParams) (db.Workoutlog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkoutLog", arg0, arg1)
	ret0, _ := ret[0].(db.Workoutlog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkoutLog indicates an expected call of CreateWorkoutLog.
func (mr *MockStoreMockRecorder) CreateWorkoutLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkoutLog", reflect.TypeOf((*MockStore)(nil).CreateWorkoutLog), arg0, arg1)
}

// DeleteAvailablePlan mocks base method.
func (m *MockStore) DeleteAvailablePlan(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAvailablePlan", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAvailablePlan indicates an expected call of DeleteAvailablePlan.
func (mr *MockStoreMockRecorder) DeleteAvailablePlan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAvailablePlan", reflect.TypeOf((*MockStore)(nil).DeleteAvailablePlan), arg0, arg1)
}

// DeleteAvailablePlanExercise mocks base method.
func (m *MockStore) DeleteAvailablePlanExercise(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAvailablePlanExercise", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAvailablePlanExercise indicates an expected call of DeleteAvailablePlanExercise.
func (mr *MockStoreMockRecorder) DeleteAvailablePlanExercise(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAvailablePlanExercise", reflect.TypeOf((*MockStore)(nil).DeleteAvailablePlanExercise), arg0, arg1)
}

// DeleteExercise mocks base method.
func (m *MockStore) DeleteExercise(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExercise", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExercise indicates an expected call of DeleteExercise.
func (mr *MockStoreMockRecorder) DeleteExercise(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExercise", reflect.TypeOf((*MockStore)(nil).DeleteExercise), arg0, arg1)
}

// DeleteExerciseLog mocks base method.
func (m *MockStore) DeleteExerciseLog(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExerciseLog", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExerciseLog indicates an expected call of DeleteExerciseLog.
func (mr *MockStoreMockRecorder) DeleteExerciseLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExerciseLog", reflect.TypeOf((*MockStore)(nil).DeleteExerciseLog), arg0, arg1)
}

// DeleteExerciseSet mocks base method.
func (m *MockStore) DeleteExerciseSet(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExerciseSet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExerciseSet indicates an expected call of DeleteExerciseSet.
func (mr *MockStoreMockRecorder) DeleteExerciseSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExerciseSet", reflect.TypeOf((*MockStore)(nil).DeleteExerciseSet), arg0, arg1)
}

// DeleteMaxRepGoal mocks base method.
func (m *MockStore) DeleteMaxRepGoal(arg0 context.Context, arg1 db.DeleteMaxRepGoalParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMaxRepGoal", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMaxRepGoal indicates an expected call of DeleteMaxRepGoal.
func (mr *MockStoreMockRecorder) DeleteMaxRepGoal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMaxRepGoal", reflect.TypeOf((*MockStore)(nil).DeleteMaxRepGoal), arg0, arg1)
}

// DeleteMaxWeightGoal mocks base method.
func (m *MockStore) DeleteMaxWeightGoal(arg0 context.Context, arg1 db.DeleteMaxWeightGoalParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMaxWeightGoal", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMaxWeightGoal indicates an expected call of DeleteMaxWeightGoal.
func (mr *MockStoreMockRecorder) DeleteMaxWeightGoal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMaxWeightGoal", reflect.TypeOf((*MockStore)(nil).DeleteMaxWeightGoal), arg0, arg1)
}

// DeleteOneOffWorkoutExercise mocks base method.
func (m *MockStore) DeleteOneOffWorkoutExercise(arg0 context.Context, arg1 db.DeleteOneOffWorkoutExerciseParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOneOffWorkoutExercise", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOneOffWorkoutExercise indicates an expected call of DeleteOneOffWorkoutExercise.
func (mr *MockStoreMockRecorder) DeleteOneOffWorkoutExercise(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOneOffWorkoutExercise", reflect.TypeOf((*MockStore)(nil).DeleteOneOffWorkoutExercise), arg0, arg1)
}

// DeletePlan mocks base method.
func (m *MockStore) DeletePlan(arg0 context.Context, arg1 db.DeletePlanParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlan", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePlan indicates an expected call of DeletePlan.
func (mr *MockStoreMockRecorder) DeletePlan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlan", reflect.TypeOf((*MockStore)(nil).DeletePlan), arg0, arg1)
}

// DeleteSet mocks base method.
func (m *MockStore) DeleteSet(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSet indicates an expected call of DeleteSet.
func (mr *MockStoreMockRecorder) DeleteSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSet", reflect.TypeOf((*MockStore)(nil).DeleteSet), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// DeleteUserProfile mocks base method.
func (m *MockStore) DeleteUserProfile(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserProfile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserProfile indicates an expected call of DeleteUserProfile.
func (mr *MockStoreMockRecorder) DeleteUserProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserProfile", reflect.TypeOf((*MockStore)(nil).DeleteUserProfile), arg0, arg1)
}

// DeleteWeightEntry mocks base method.
func (m *MockStore) DeleteWeightEntry(arg0 context.Context, arg1 db.DeleteWeightEntryParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWeightEntry", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWeightEntry indicates an expected call of DeleteWeightEntry.
func (mr *MockStoreMockRecorder) DeleteWeightEntry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWeightEntry", reflect.TypeOf((*MockStore)(nil).DeleteWeightEntry), arg0, arg1)
}

// DeleteWorkout mocks base method.
func (m *MockStore) DeleteWorkout(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkout", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorkout indicates an expected call of DeleteWorkout.
func (mr *MockStoreMockRecorder) DeleteWorkout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkout", reflect.TypeOf((*MockStore)(nil).DeleteWorkout), arg0, arg1)
}

// DeleteWorkoutLog mocks base method.
func (m *MockStore) DeleteWorkoutLog(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkoutLog", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorkoutLog indicates an expected call of DeleteWorkoutLog.
func (mr *MockStoreMockRecorder) DeleteWorkoutLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkoutLog", reflect.TypeOf((*MockStore)(nil).DeleteWorkoutLog), arg0, arg1)
}

// GetAvailablePlan mocks base method.
func (m *MockStore) GetAvailablePlan(arg0 context.Context, arg1 int64) (db.Availableworkoutplan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailablePlan", arg0, arg1)
	ret0, _ := ret[0].(db.Availableworkoutplan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailablePlan indicates an expected call of GetAvailablePlan.
func (mr *MockStoreMockRecorder) GetAvailablePlan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailablePlan", reflect.TypeOf((*MockStore)(nil).GetAvailablePlan), arg0, arg1)
}

// GetAvailablePlanExercise mocks base method.
func (m *MockStore) GetAvailablePlanExercise(arg0 context.Context, arg1 int64) (db.Availableplanexercise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailablePlanExercise", arg0, arg1)
	ret0, _ := ret[0].(db.Availableplanexercise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailablePlanExercise indicates an expected call of GetAvailablePlanExercise.
func (mr *MockStoreMockRecorder) GetAvailablePlanExercise(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailablePlanExercise", reflect.TypeOf((*MockStore)(nil).GetAvailablePlanExercise), arg0, arg1)
}

// GetExercise mocks base method.
func (m *MockStore) GetExercise(arg0 context.Context, arg1 string) (db.Exercise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExercise", arg0, arg1)
	ret0, _ := ret[0].(db.Exercise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExercise indicates an expected call of GetExercise.
func (mr *MockStoreMockRecorder) GetExercise(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExercise", reflect.TypeOf((*MockStore)(nil).GetExercise), arg0, arg1)
}

// GetExerciseLog mocks base method.
func (m *MockStore) GetExerciseLog(arg0 context.Context, arg1 int64) (db.Exerciselog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExerciseLog", arg0, arg1)
	ret0, _ := ret[0].(db.Exerciselog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExerciseLog indicates an expected call of GetExerciseLog.
func (mr *MockStoreMockRecorder) GetExerciseLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExerciseLog", reflect.TypeOf((*MockStore)(nil).GetExerciseLog), arg0, arg1)
}

// GetExerciseSet mocks base method.
func (m *MockStore) GetExerciseSet(arg0 context.Context, arg1 int64) (db.Exerciseset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExerciseSet", arg0, arg1)
	ret0, _ := ret[0].(db.Exerciseset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExerciseSet indicates an expected call of GetExerciseSet.
func (mr *MockStoreMockRecorder) GetExerciseSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExerciseSet", reflect.TypeOf((*MockStore)(nil).GetExerciseSet), arg0, arg1)
}

// GetMaxRepGoal mocks base method.
func (m *MockStore) GetMaxRepGoal(arg0 context.Context, arg1 db.GetMaxRepGoalParams) (db.Maxrepgoal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxRepGoal", arg0, arg1)
	ret0, _ := ret[0].(db.Maxrepgoal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaxRepGoal indicates an expected call of GetMaxRepGoal.
func (mr *MockStoreMockRecorder) GetMaxRepGoal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxRepGoal", reflect.TypeOf((*MockStore)(nil).GetMaxRepGoal), arg0, arg1)
}

// GetMaxWeightGoal mocks base method.
func (m *MockStore) GetMaxWeightGoal(arg0 context.Context, arg1 db.GetMaxWeightGoalParams) (db.Maxweightgoal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxWeightGoal", arg0, arg1)
	ret0, _ := ret[0].(db.Maxweightgoal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaxWeightGoal indicates an expected call of GetMaxWeightGoal.
func (mr *MockStoreMockRecorder) GetMaxWeightGoal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxWeightGoal", reflect.TypeOf((*MockStore)(nil).GetMaxWeightGoal), arg0, arg1)
}

// GetOneOffWorkoutExercise mocks base method.
func (m *MockStore) GetOneOffWorkoutExercise(arg0 context.Context, arg1 db.GetOneOffWorkoutExerciseParams) (db.Oneoffworkoutexercise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneOffWorkoutExercise", arg0, arg1)
	ret0, _ := ret[0].(db.Oneoffworkoutexercise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneOffWorkoutExercise indicates an expected call of GetOneOffWorkoutExercise.
func (mr *MockStoreMockRecorder) GetOneOffWorkoutExercise(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneOffWorkoutExercise", reflect.TypeOf((*MockStore)(nil).GetOneOffWorkoutExercise), arg0, arg1)
}

// GetPlan mocks base method.
func (m *MockStore) GetPlan(arg0 context.Context, arg1 db.GetPlanParams) (db.Workoutplan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlan", arg0, arg1)
	ret0, _ := ret[0].(db.Workoutplan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlan indicates an expected call of GetPlan.
func (mr *MockStoreMockRecorder) GetPlan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlan", reflect.TypeOf((*MockStore)(nil).GetPlan), arg0, arg1)
}

// GetSession mocks base method.
func (m *MockStore) GetSession(arg0 context.Context, arg1 uuid.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockStoreMockRecorder) GetSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockStore)(nil).GetSession), arg0, arg1)
}

// GetSet mocks base method.
func (m *MockStore) GetSet(arg0 context.Context, arg1 int64) (db.Set, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSet", arg0, arg1)
	ret0, _ := ret[0].(db.Set)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSet indicates an expected call of GetSet.
func (mr *MockStoreMockRecorder) GetSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSet", reflect.TypeOf((*MockStore)(nil).GetSet), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// GetUserProfile mocks base method.
func (m *MockStore) GetUserProfile(arg0 context.Context, arg1 string) (db.GetUserProfileRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfile", arg0, arg1)
	ret0, _ := ret[0].(db.GetUserProfileRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfile indicates an expected call of GetUserProfile.
func (mr *MockStoreMockRecorder) GetUserProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfile", reflect.TypeOf((*MockStore)(nil).GetUserProfile), arg0, arg1)
}

// GetWeightEntry mocks base method.
func (m *MockStore) GetWeightEntry(arg0 context.Context, arg1 db.GetWeightEntryParams) (db.Weightentry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeightEntry", arg0, arg1)
	ret0, _ := ret[0].(db.Weightentry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeightEntry indicates an expected call of GetWeightEntry.
func (mr *MockStoreMockRecorder) GetWeightEntry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeightEntry", reflect.TypeOf((*MockStore)(nil).GetWeightEntry), arg0, arg1)
}

// GetWorkout mocks base method.
func (m *MockStore) GetWorkout(arg0 context.Context, arg1 int64) (db.Workout, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkout", arg0, arg1)
	ret0, _ := ret[0].(db.Workout)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkout indicates an expected call of GetWorkout.
func (mr *MockStoreMockRecorder) GetWorkout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkout", reflect.TypeOf((*MockStore)(nil).GetWorkout), arg0, arg1)
}

// GetWorkoutLog mocks base method.
func (m *MockStore) GetWorkoutLog(arg0 context.Context, arg1 int64) (db.Workoutlog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkoutLog", arg0, arg1)
	ret0, _ := ret[0].(db.Workoutlog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkoutLog indicates an expected call of GetWorkoutLog.
func (mr *MockStoreMockRecorder) GetWorkoutLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkoutLog", reflect.TypeOf((*MockStore)(nil).GetWorkoutLog), arg0, arg1)
}

// ListAllAvailablePlanExercises mocks base method.
func (m *MockStore) ListAllAvailablePlanExercises(arg0 context.Context, arg1 db.ListAllAvailablePlanExercisesParams) ([]db.Availableplanexercise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllAvailablePlanExercises", arg0, arg1)
	ret0, _ := ret[0].([]db.Availableplanexercise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllAvailablePlanExercises indicates an expected call of ListAllAvailablePlanExercises.
func (mr *MockStoreMockRecorder) ListAllAvailablePlanExercises(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllAvailablePlanExercises", reflect.TypeOf((*MockStore)(nil).ListAllAvailablePlanExercises), arg0, arg1)
}

// ListAllAvailablePlans mocks base method.
func (m *MockStore) ListAllAvailablePlans(arg0 context.Context, arg1 db.ListAllAvailablePlansParams) ([]db.Availableworkoutplan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllAvailablePlans", arg0, arg1)
	ret0, _ := ret[0].([]db.Availableworkoutplan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllAvailablePlans indicates an expected call of ListAllAvailablePlans.
func (mr *MockStoreMockRecorder) ListAllAvailablePlans(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllAvailablePlans", reflect.TypeOf((*MockStore)(nil).ListAllAvailablePlans), arg0, arg1)
}

// ListAllExercises mocks base method.
func (m *MockStore) ListAllExercises(arg0 context.Context, arg1 db.ListAllExercisesParams) ([]db.Exercise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllExercises", arg0, arg1)
	ret0, _ := ret[0].([]db.Exercise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllExercises indicates an expected call of ListAllExercises.
func (mr *MockStoreMockRecorder) ListAllExercises(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllExercises", reflect.TypeOf((*MockStore)(nil).ListAllExercises), arg0, arg1)
}

// ListAllOneOffWorkoutExercises mocks base method.
func (m *MockStore) ListAllOneOffWorkoutExercises(arg0 context.Context, arg1 db.ListAllOneOffWorkoutExercisesParams) ([]db.Oneoffworkoutexercise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllOneOffWorkoutExercises", arg0, arg1)
	ret0, _ := ret[0].([]db.Oneoffworkoutexercise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllOneOffWorkoutExercises indicates an expected call of ListAllOneOffWorkoutExercises.
func (mr *MockStoreMockRecorder) ListAllOneOffWorkoutExercises(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllOneOffWorkoutExercises", reflect.TypeOf((*MockStore)(nil).ListAllOneOffWorkoutExercises), arg0, arg1)
}

// ListAvailablePlansByCreator mocks base method.
func (m *MockStore) ListAvailablePlansByCreator(arg0 context.Context, arg1 db.ListAvailablePlansByCreatorParams) ([]db.Availableworkoutplan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailablePlansByCreator", arg0, arg1)
	ret0, _ := ret[0].([]db.Availableworkoutplan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailablePlansByCreator indicates an expected call of ListAvailablePlansByCreator.
func (mr *MockStoreMockRecorder) ListAvailablePlansByCreator(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailablePlansByCreator", reflect.TypeOf((*MockStore)(nil).ListAvailablePlansByCreator), arg0, arg1)
}

// ListEquipmentExercises mocks base method.
func (m *MockStore) ListEquipmentExercises(arg0 context.Context, arg1 db.ListEquipmentExercisesParams) ([]db.Exercise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEquipmentExercises", arg0, arg1)
	ret0, _ := ret[0].([]db.Exercise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEquipmentExercises indicates an expected call of ListEquipmentExercises.
func (mr *MockStoreMockRecorder) ListEquipmentExercises(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEquipmentExercises", reflect.TypeOf((*MockStore)(nil).ListEquipmentExercises), arg0, arg1)
}

// ListExerciseLog mocks base method.
func (m *MockStore) ListExerciseLog(arg0 context.Context, arg1 db.ListExerciseLogParams) ([]db.Exerciselog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExerciseLog", arg0, arg1)
	ret0, _ := ret[0].([]db.Exerciselog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExerciseLog indicates an expected call of ListExerciseLog.
func (mr *MockStoreMockRecorder) ListExerciseLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExerciseLog", reflect.TypeOf((*MockStore)(nil).ListExerciseLog), arg0, arg1)
}

// ListExerciseSets mocks base method.
func (m *MockStore) ListExerciseSets(arg0 context.Context, arg1 db.ListExerciseSetsParams) ([]db.Exerciseset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExerciseSets", arg0, arg1)
	ret0, _ := ret[0].([]db.Exerciseset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExerciseSets indicates an expected call of ListExerciseSets.
func (mr *MockStoreMockRecorder) ListExerciseSets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExerciseSets", reflect.TypeOf((*MockStore)(nil).ListExerciseSets), arg0, arg1)
}

// ListMaxRepGoals mocks base method.
func (m *MockStore) ListMaxRepGoals(arg0 context.Context, arg1 db.ListMaxRepGoalsParams) ([]db.Maxrepgoal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMaxRepGoals", arg0, arg1)
	ret0, _ := ret[0].([]db.Maxrepgoal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMaxRepGoals indicates an expected call of ListMaxRepGoals.
func (mr *MockStoreMockRecorder) ListMaxRepGoals(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMaxRepGoals", reflect.TypeOf((*MockStore)(nil).ListMaxRepGoals), arg0, arg1)
}

// ListMaxWeightGoals mocks base method.
func (m *MockStore) ListMaxWeightGoals(arg0 context.Context, arg1 db.ListMaxWeightGoalsParams) ([]db.Maxweightgoal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMaxWeightGoals", arg0, arg1)
	ret0, _ := ret[0].([]db.Maxweightgoal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMaxWeightGoals indicates an expected call of ListMaxWeightGoals.
func (mr *MockStoreMockRecorder) ListMaxWeightGoals(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMaxWeightGoals", reflect.TypeOf((*MockStore)(nil).ListMaxWeightGoals), arg0, arg1)
}

// ListMuscleGroupExercises mocks base method.
func (m *MockStore) ListMuscleGroupExercises(arg0 context.Context, arg1 db.ListMuscleGroupExercisesParams) ([]db.Exercise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMuscleGroupExercises", arg0, arg1)
	ret0, _ := ret[0].([]db.Exercise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMuscleGroupExercises indicates an expected call of ListMuscleGroupExercises.
func (mr *MockStoreMockRecorder) ListMuscleGroupExercises(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMuscleGroupExercises", reflect.TypeOf((*MockStore)(nil).ListMuscleGroupExercises), arg0, arg1)
}

// ListSets mocks base method.
func (m *MockStore) ListSets(arg0 context.Context, arg1 db.ListSetsParams) ([]db.Set, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSets", arg0, arg1)
	ret0, _ := ret[0].([]db.Set)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSets indicates an expected call of ListSets.
func (mr *MockStoreMockRecorder) ListSets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSets", reflect.TypeOf((*MockStore)(nil).ListSets), arg0, arg1)
}

// ListWeightEntries mocks base method.
func (m *MockStore) ListWeightEntries(arg0 context.Context, arg1 db.ListWeightEntriesParams) ([]db.Weightentry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWeightEntries", arg0, arg1)
	ret0, _ := ret[0].([]db.Weightentry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWeightEntries indicates an expected call of ListWeightEntries.
func (mr *MockStoreMockRecorder) ListWeightEntries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWeightEntries", reflect.TypeOf((*MockStore)(nil).ListWeightEntries), arg0, arg1)
}

// ListWorkoutLogs mocks base method.
func (m *MockStore) ListWorkoutLogs(arg0 context.Context, arg1 db.ListWorkoutLogsParams) ([]db.Workoutlog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkoutLogs", arg0, arg1)
	ret0, _ := ret[0].([]db.Workoutlog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkoutLogs indicates an expected call of ListWorkoutLogs.
func (mr *MockStoreMockRecorder) ListWorkoutLogs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkoutLogs", reflect.TypeOf((*MockStore)(nil).ListWorkoutLogs), arg0, arg1)
}

// ListWorkouts mocks base method.
func (m *MockStore) ListWorkouts(arg0 context.Context, arg1 db.ListWorkoutsParams) ([]db.Workout, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkouts", arg0, arg1)
	ret0, _ := ret[0].([]db.Workout)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkouts indicates an expected call of ListWorkouts.
func (mr *MockStoreMockRecorder) ListWorkouts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkouts", reflect.TypeOf((*MockStore)(nil).ListWorkouts), arg0, arg1)
}

// UpdateAvailablePlan mocks base method.
func (m *MockStore) UpdateAvailablePlan(arg0 context.Context, arg1 db.UpdateAvailablePlanParams) (db.Availableworkoutplan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAvailablePlan", arg0, arg1)
	ret0, _ := ret[0].(db.Availableworkoutplan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAvailablePlan indicates an expected call of UpdateAvailablePlan.
func (mr *MockStoreMockRecorder) UpdateAvailablePlan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAvailablePlan", reflect.TypeOf((*MockStore)(nil).UpdateAvailablePlan), arg0, arg1)
}

// UpdateAvailablePlanExercise mocks base method.
func (m *MockStore) UpdateAvailablePlanExercise(arg0 context.Context, arg1 db.UpdateAvailablePlanExerciseParams) (db.Availableplanexercise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAvailablePlanExercise", arg0, arg1)
	ret0, _ := ret[0].(db.Availableplanexercise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAvailablePlanExercise indicates an expected call of UpdateAvailablePlanExercise.
func (mr *MockStoreMockRecorder) UpdateAvailablePlanExercise(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAvailablePlanExercise", reflect.TypeOf((*MockStore)(nil).UpdateAvailablePlanExercise), arg0, arg1)
}

// UpdateExercise mocks base method.
func (m *MockStore) UpdateExercise(arg0 context.Context, arg1 db.UpdateExerciseParams) (db.Exercise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExercise", arg0, arg1)
	ret0, _ := ret[0].(db.Exercise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExercise indicates an expected call of UpdateExercise.
func (mr *MockStoreMockRecorder) UpdateExercise(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExercise", reflect.TypeOf((*MockStore)(nil).UpdateExercise), arg0, arg1)
}

// UpdateExerciseLog mocks base method.
func (m *MockStore) UpdateExerciseLog(arg0 context.Context, arg1 db.UpdateExerciseLogParams) (db.Exerciselog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExerciseLog", arg0, arg1)
	ret0, _ := ret[0].(db.Exerciselog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExerciseLog indicates an expected call of UpdateExerciseLog.
func (mr *MockStoreMockRecorder) UpdateExerciseLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExerciseLog", reflect.TypeOf((*MockStore)(nil).UpdateExerciseLog), arg0, arg1)
}

// UpdateExerciseSet mocks base method.
func (m *MockStore) UpdateExerciseSet(arg0 context.Context, arg1 db.UpdateExerciseSetParams) (db.Exerciseset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExerciseSet", arg0, arg1)
	ret0, _ := ret[0].(db.Exerciseset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExerciseSet indicates an expected call of UpdateExerciseSet.
func (mr *MockStoreMockRecorder) UpdateExerciseSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExerciseSet", reflect.TypeOf((*MockStore)(nil).UpdateExerciseSet), arg0, arg1)
}

// UpdateMaxRepGoal mocks base method.
func (m *MockStore) UpdateMaxRepGoal(arg0 context.Context, arg1 db.UpdateMaxRepGoalParams) (db.Maxrepgoal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMaxRepGoal", arg0, arg1)
	ret0, _ := ret[0].(db.Maxrepgoal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMaxRepGoal indicates an expected call of UpdateMaxRepGoal.
func (mr *MockStoreMockRecorder) UpdateMaxRepGoal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMaxRepGoal", reflect.TypeOf((*MockStore)(nil).UpdateMaxRepGoal), arg0, arg1)
}

// UpdateMaxWeightGoal mocks base method.
func (m *MockStore) UpdateMaxWeightGoal(arg0 context.Context, arg1 db.UpdateMaxWeightGoalParams) (db.Maxweightgoal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMaxWeightGoal", arg0, arg1)
	ret0, _ := ret[0].(db.Maxweightgoal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMaxWeightGoal indicates an expected call of UpdateMaxWeightGoal.
func (mr *MockStoreMockRecorder) UpdateMaxWeightGoal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMaxWeightGoal", reflect.TypeOf((*MockStore)(nil).UpdateMaxWeightGoal), arg0, arg1)
}

// UpdateOneOffWorkoutExercise mocks base method.
func (m *MockStore) UpdateOneOffWorkoutExercise(arg0 context.Context, arg1 db.UpdateOneOffWorkoutExerciseParams) (db.Oneoffworkoutexercise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOneOffWorkoutExercise", arg0, arg1)
	ret0, _ := ret[0].(db.Oneoffworkoutexercise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOneOffWorkoutExercise indicates an expected call of UpdateOneOffWorkoutExercise.
func (mr *MockStoreMockRecorder) UpdateOneOffWorkoutExercise(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOneOffWorkoutExercise", reflect.TypeOf((*MockStore)(nil).UpdateOneOffWorkoutExercise), arg0, arg1)
}

// UpdatePlan mocks base method.
func (m *MockStore) UpdatePlan(arg0 context.Context, arg1 db.UpdatePlanParams) (db.Workoutplan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlan", arg0, arg1)
	ret0, _ := ret[0].(db.Workoutplan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePlan indicates an expected call of UpdatePlan.
func (mr *MockStoreMockRecorder) UpdatePlan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlan", reflect.TypeOf((*MockStore)(nil).UpdatePlan), arg0, arg1)
}

// UpdateSet mocks base method.
func (m *MockStore) UpdateSet(arg0 context.Context, arg1 db.UpdateSetParams) (db.Set, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSet", arg0, arg1)
	ret0, _ := ret[0].(db.Set)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSet indicates an expected call of UpdateSet.
func (mr *MockStoreMockRecorder) UpdateSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSet", reflect.TypeOf((*MockStore)(nil).UpdateSet), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}

// UpdateUserProfile mocks base method.
func (m *MockStore) UpdateUserProfile(arg0 context.Context, arg1 db.UpdateUserProfileParams) (db.Userprofile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProfile", arg0, arg1)
	ret0, _ := ret[0].(db.Userprofile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserProfile indicates an expected call of UpdateUserProfile.
func (mr *MockStoreMockRecorder) UpdateUserProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProfile", reflect.TypeOf((*MockStore)(nil).UpdateUserProfile), arg0, arg1)
}

// UpdateWeightEntry mocks base method.
func (m *MockStore) UpdateWeightEntry(arg0 context.Context, arg1 db.UpdateWeightEntryParams) (db.Weightentry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWeightEntry", arg0, arg1)
	ret0, _ := ret[0].(db.Weightentry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWeightEntry indicates an expected call of UpdateWeightEntry.
func (mr *MockStoreMockRecorder) UpdateWeightEntry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWeightEntry", reflect.TypeOf((*MockStore)(nil).UpdateWeightEntry), arg0, arg1)
}

// UpdateWorkout mocks base method.
func (m *MockStore) UpdateWorkout(arg0 context.Context, arg1 db.UpdateWorkoutParams) (db.Workout, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkout", arg0, arg1)
	ret0, _ := ret[0].(db.Workout)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkout indicates an expected call of UpdateWorkout.
func (mr *MockStoreMockRecorder) UpdateWorkout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkout", reflect.TypeOf((*MockStore)(nil).UpdateWorkout), arg0, arg1)
}

// UpdateWorkoutLog mocks base method.
func (m *MockStore) UpdateWorkoutLog(arg0 context.Context, arg1 db.UpdateWorkoutLogParams) (db.Workoutlog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkoutLog", arg0, arg1)
	ret0, _ := ret[0].(db.Workoutlog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkoutLog indicates an expected call of UpdateWorkoutLog.
func (mr *MockStoreMockRecorder) UpdateWorkoutLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkoutLog", reflect.TypeOf((*MockStore)(nil).UpdateWorkoutLog), arg0, arg1)
}
