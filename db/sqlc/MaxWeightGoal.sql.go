// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: MaxWeightGoal.sql

package db

import (
	"context"
)

const createMaxWeightGoal = `-- name: CreateMaxWeightGoal :one
INSERT INTO MaxWeightGoal (username, exercise_name, goal_weight, notes)
VALUES ($1, $2, $3, $4)
RETURNING goal_id, username, exercise_name, goal_weight, notes, created_at
`

type CreateMaxWeightGoalParams struct {
	Username     string `json:"username"`
	ExerciseName string `json:"exercise_name"`
	GoalWeight   int32  `json:"goal_weight"`
	Notes        string `json:"notes"`
}

func (q *Queries) CreateMaxWeightGoal(ctx context.Context, arg CreateMaxWeightGoalParams) (Maxweightgoal, error) {
	row := q.db.QueryRow(ctx, createMaxWeightGoal,
		arg.Username,
		arg.ExerciseName,
		arg.GoalWeight,
		arg.Notes,
	)
	var i Maxweightgoal
	err := row.Scan(
		&i.GoalID,
		&i.Username,
		&i.ExerciseName,
		&i.GoalWeight,
		&i.Notes,
		&i.CreatedAt,
	)
	return i, err
}

const deleteMaxWeightGoal = `-- name: DeleteMaxWeightGoal :exec
DELETE FROM MaxWeightGoal
WHERE exercise_name = $1 AND username = $2 AND goal_id = $3
`

type DeleteMaxWeightGoalParams struct {
	ExerciseName string `json:"exercise_name"`
	Username     string `json:"username"`
	GoalID       int64  `json:"goal_id"`
}

func (q *Queries) DeleteMaxWeightGoal(ctx context.Context, arg DeleteMaxWeightGoalParams) error {
	_, err := q.db.Exec(ctx, deleteMaxWeightGoal, arg.ExerciseName, arg.Username, arg.GoalID)
	return err
}

const getMaxWeightGoal = `-- name: GetMaxWeightGoal :one
SELECT goal_id, username, exercise_name, goal_weight, notes, created_at
FROM MaxWeightGoal
WHERE exercise_name = $1 AND username = $2 AND goal_id = $3
`

type GetMaxWeightGoalParams struct {
	ExerciseName string `json:"exercise_name"`
	Username     string `json:"username"`
	GoalID       int64  `json:"goal_id"`
}

func (q *Queries) GetMaxWeightGoal(ctx context.Context, arg GetMaxWeightGoalParams) (Maxweightgoal, error) {
	row := q.db.QueryRow(ctx, getMaxWeightGoal, arg.ExerciseName, arg.Username, arg.GoalID)
	var i Maxweightgoal
	err := row.Scan(
		&i.GoalID,
		&i.Username,
		&i.ExerciseName,
		&i.GoalWeight,
		&i.Notes,
		&i.CreatedAt,
	)
	return i, err
}

const listMaxWeightGoals = `-- name: ListMaxWeightGoals :many
SELECT goal_id, username, exercise_name, goal_weight, notes, created_at
FROM MaxWeightGoal
WHERE exercise_name = $1 AND username = $2
ORDER BY goal_id -- You can change the ORDER BY clause to order by a different column if needed
LIMIT $3
OFFSET $4
`

type ListMaxWeightGoalsParams struct {
	ExerciseName string `json:"exercise_name"`
	Username     string `json:"username"`
	Limit        int32  `json:"limit"`
	Offset       int32  `json:"offset"`
}

func (q *Queries) ListMaxWeightGoals(ctx context.Context, arg ListMaxWeightGoalsParams) ([]Maxweightgoal, error) {
	rows, err := q.db.Query(ctx, listMaxWeightGoals,
		arg.ExerciseName,
		arg.Username,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Maxweightgoal{}
	for rows.Next() {
		var i Maxweightgoal
		if err := rows.Scan(
			&i.GoalID,
			&i.Username,
			&i.ExerciseName,
			&i.GoalWeight,
			&i.Notes,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMaxWeightGoal = `-- name: UpdateMaxWeightGoal :one
UPDATE MaxWeightGoal
SET goal_weight = $4, notes = $5
WHERE exercise_name = $1 AND username = $2 AND goal_id = $3
RETURNING goal_id, username, exercise_name, goal_weight, notes, created_at
`

type UpdateMaxWeightGoalParams struct {
	ExerciseName string `json:"exercise_name"`
	Username     string `json:"username"`
	GoalID       int64  `json:"goal_id"`
	GoalWeight   int32  `json:"goal_weight"`
	Notes        string `json:"notes"`
}

func (q *Queries) UpdateMaxWeightGoal(ctx context.Context, arg UpdateMaxWeightGoalParams) (Maxweightgoal, error) {
	row := q.db.QueryRow(ctx, updateMaxWeightGoal,
		arg.ExerciseName,
		arg.Username,
		arg.GoalID,
		arg.GoalWeight,
		arg.Notes,
	)
	var i Maxweightgoal
	err := row.Scan(
		&i.GoalID,
		&i.Username,
		&i.ExerciseName,
		&i.GoalWeight,
		&i.Notes,
		&i.CreatedAt,
	)
	return i, err
}
