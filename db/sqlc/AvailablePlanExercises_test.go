// Code generated by sqlc. DO NOT EDIT.
package db

import (
	"context"
	"testing"

	"github.com/DMonkey83/MyFitnessApp/util"
	"github.com/stretchr/testify/require"
)

func CreateRandomAvailableExercise(t *testing.T) Availableplanexercise {
	plan1 := CreateRandomAvailableWorkoutPlan(t)
	randomExercise := CreateRandomExercise(t)
	arg := CreateAvailablePlanExerciseParams{
		PlanID:       plan1.PlanID,
		ExerciseName: randomExercise.ExerciseName,
		Sets:         int32(util.GetRandomAmount(1, 20)),
		RestDuration: "1m",
		Notes:        util.GetRandomUsername(30),
	}

	exercise, err := testStore.CreateAvailablePlanExercise(context.Background(), arg)
	require.NoError(t, err)
	require.NotEmpty(t, exercise)

	require.Equal(t, arg.ExerciseName, exercise.ExerciseName)
	require.Equal(t, arg.PlanID, exercise.PlanID)
	require.Equal(t, arg.Notes, exercise.Notes)
	require.Equal(t, arg.RestDuration, exercise.RestDuration)
	require.Equal(t, arg.Sets, exercise.Sets)
	require.NotNil(t, exercise.ID)

	return exercise
}

func TestCreateAvailablerExercise(t *testing.T) {
	CreateRandomAvailableExercise(t)
}

func TestGetAvailableExercise(t *testing.T) {
	ex1 := CreateRandomAvailableExercise(t)
	ex2, err := testStore.GetAvailablePlanExercise(context.Background(), ex1.ID)
	require.NoError(t, err)
	require.NotEmpty(t, ex2)

	require.Equal(t, ex1.ExerciseName, ex2.ExerciseName)
	require.Equal(t, ex1.PlanID, ex2.PlanID)
	require.Equal(t, ex1.Notes, ex2.Notes)
	require.Equal(t, ex1.RestDuration, ex2.RestDuration)
	require.Equal(t, ex1.Sets, ex2.Sets)
}

func TestUpdateAvailableExercise(t *testing.T) {
	ex1 := CreateRandomAvailableExercise(t)

	arg := UpdateAvailablePlanExerciseParams{
		ID:           ex1.ID,
		Notes:        util.GetRandomUsername(43),
		Sets:         int32(util.GetRandomAmount(1, 20)),
		RestDuration: "20m",
	}

	ex2, err := testStore.UpdateAvailablePlanExercise(context.Background(), arg)
	require.NoError(t, err)
	require.NotEmpty(t, ex2)

	require.Equal(t, arg.Notes, ex2.Notes)
	require.Equal(t, arg.RestDuration, ex2.RestDuration)
	require.Equal(t, arg.Sets, ex2.Sets)
}

func TestDeleteAvailableExercise(t *testing.T) {
	ex1 := CreateRandomAvailableExercise(t)
	err := testStore.DeleteAvailablePlanExercise(context.Background(), ex1.ID)
	require.NoError(t, err)

	ex2, err := testStore.GetAvailablePlanExercise(context.Background(), ex1.ID)
	require.Error(t, err)
	require.EqualError(t, err, ErrRecordNotFound.Error())
	require.Empty(t, ex2)
}

func TestAllAvailableExercises(t *testing.T) {
	for i := 0; i < 10; i++ {
		CreateRandomAvailableExercise(t)
	}

	arg := ListAllAvailablePlanExercisesParams{
		Limit:  5,
		Offset: 0,
	}

	exercises, err := testStore.ListAllAvailablePlanExercises(context.Background(), arg)
	require.NoError(t, err)
	require.NotEmpty(t, exercises)

	for _, exercise := range exercises {
		require.NotEmpty(t, exercise)
	}
}
