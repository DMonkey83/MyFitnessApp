// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: Equipment.sql

package db

import (
	"context"
)

const createEquipment = `-- name: CreateEquipment :one
INSERT INTO Equipment (equipment_name, description, equipment_type)
VALUES ($1, $2, $3)
RETURNING equipment_name, description, equipment_type, created_at
`

type CreateEquipmentParams struct {
	EquipmentName string        `json:"equipment_name"`
	Description   string        `json:"description"`
	EquipmentType Equipmenttype `json:"equipment_type"`
}

func (q *Queries) CreateEquipment(ctx context.Context, arg CreateEquipmentParams) (Equipment, error) {
	row := q.db.QueryRow(ctx, createEquipment, arg.EquipmentName, arg.Description, arg.EquipmentType)
	var i Equipment
	err := row.Scan(
		&i.EquipmentName,
		&i.Description,
		&i.EquipmentType,
		&i.CreatedAt,
	)
	return i, err
}

const deleteEquipment = `-- name: DeleteEquipment :exec
DELETE FROM Equipment
WHERE equipment_name = $1
`

func (q *Queries) DeleteEquipment(ctx context.Context, equipmentName string) error {
	_, err := q.db.Exec(ctx, deleteEquipment, equipmentName)
	return err
}

const getEquipment = `-- name: GetEquipment :one
SELECT equipment_name, description, equipment_type, created_at
FROM Equipment
WHERE equipment_name = $1
`

func (q *Queries) GetEquipment(ctx context.Context, equipmentName string) (Equipment, error) {
	row := q.db.QueryRow(ctx, getEquipment, equipmentName)
	var i Equipment
	err := row.Scan(
		&i.EquipmentName,
		&i.Description,
		&i.EquipmentType,
		&i.CreatedAt,
	)
	return i, err
}

const listExpuipments = `-- name: ListExpuipments :many
SELECT equipment_name, description, equipment_type, created_at
FROM Equipment
ORDER BY equipment_name -- You can change the ORDER BY clause to order by a different column if needed
LIMIT $1
OFFSET $2
`

type ListExpuipmentsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListExpuipments(ctx context.Context, arg ListExpuipmentsParams) ([]Equipment, error) {
	rows, err := q.db.Query(ctx, listExpuipments, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Equipment{}
	for rows.Next() {
		var i Equipment
		if err := rows.Scan(
			&i.EquipmentName,
			&i.Description,
			&i.EquipmentType,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEquipment = `-- name: UpdateEquipment :one
UPDATE Equipment
SET description = $2, equipment_type = $3
WHERE equipment_name = $1
RETURNING equipment_name, description, equipment_type, created_at
`

type UpdateEquipmentParams struct {
	EquipmentName string        `json:"equipment_name"`
	Description   string        `json:"description"`
	EquipmentType Equipmenttype `json:"equipment_type"`
}

func (q *Queries) UpdateEquipment(ctx context.Context, arg UpdateEquipmentParams) (Equipment, error) {
	row := q.db.QueryRow(ctx, updateEquipment, arg.EquipmentName, arg.Description, arg.EquipmentType)
	var i Equipment
	err := row.Scan(
		&i.EquipmentName,
		&i.Description,
		&i.EquipmentType,
		&i.CreatedAt,
	)
	return i, err
}
