// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: WeightEntry.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createWeightEntry = `-- name: CreateWeightEntry :one
INSERT INTO WeightEntry (user_id, entry_date, weight_kg, weight_lb, notes)
VALUES ($1, $2, $3, $4, $5)
RETURNING weight_entry_id
`

type CreateWeightEntryParams struct {
	UserID    int64         `json:"user_id"`
	EntryDate pgtype.Date   `json:"entry_date"`
	WeightKg  pgtype.Float8 `json:"weight_kg"`
	WeightLb  pgtype.Float8 `json:"weight_lb"`
	Notes     pgtype.Text   `json:"notes"`
}

func (q *Queries) CreateWeightEntry(ctx context.Context, arg CreateWeightEntryParams) (int64, error) {
	row := q.db.QueryRow(ctx, createWeightEntry,
		arg.UserID,
		arg.EntryDate,
		arg.WeightKg,
		arg.WeightLb,
		arg.Notes,
	)
	var weight_entry_id int64
	err := row.Scan(&weight_entry_id)
	return weight_entry_id, err
}

const deleteWeightEntry = `-- name: DeleteWeightEntry :exec
DELETE FROM WeightEntry
WHERE weight_entry_id = $1
`

func (q *Queries) DeleteWeightEntry(ctx context.Context, weightEntryID int64) error {
	_, err := q.db.Exec(ctx, deleteWeightEntry, weightEntryID)
	return err
}

const getWeightEntry = `-- name: GetWeightEntry :one
SELECT weight_entry_id, user_id, entry_date, weight_kg, weight_lb, notes
FROM WeightEntry
WHERE weight_entry_id = $1
`

func (q *Queries) GetWeightEntry(ctx context.Context, weightEntryID int64) (Weightentry, error) {
	row := q.db.QueryRow(ctx, getWeightEntry, weightEntryID)
	var i Weightentry
	err := row.Scan(
		&i.WeightEntryID,
		&i.UserID,
		&i.EntryDate,
		&i.WeightKg,
		&i.WeightLb,
		&i.Notes,
	)
	return i, err
}

const listWeightEntries = `-- name: ListWeightEntries :many
SELECT entry_date, weight_kg, weight_lb, notes
FROM WeightEntry
ORDER BY weight_entry_id -- You can change the ORDER BY clause to order by a different column if needed
LIMIT $1
OFFSET $2
`

type ListWeightEntriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListWeightEntriesRow struct {
	EntryDate pgtype.Date   `json:"entry_date"`
	WeightKg  pgtype.Float8 `json:"weight_kg"`
	WeightLb  pgtype.Float8 `json:"weight_lb"`
	Notes     pgtype.Text   `json:"notes"`
}

func (q *Queries) ListWeightEntries(ctx context.Context, arg ListWeightEntriesParams) ([]ListWeightEntriesRow, error) {
	rows, err := q.db.Query(ctx, listWeightEntries, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListWeightEntriesRow{}
	for rows.Next() {
		var i ListWeightEntriesRow
		if err := rows.Scan(
			&i.EntryDate,
			&i.WeightKg,
			&i.WeightLb,
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWeightEntry = `-- name: UpdateWeightEntry :one
UPDATE WeightEntry
SET user_id = $2, entry_date = $3, weight_kg = $4, weight_lb = $5, notes = $6
WHERE weight_entry_id = $1
RETURNING weight_entry_id, user_id, entry_date, weight_kg, weight_lb, notes
`

type UpdateWeightEntryParams struct {
	WeightEntryID int64         `json:"weight_entry_id"`
	UserID        int64         `json:"user_id"`
	EntryDate     pgtype.Date   `json:"entry_date"`
	WeightKg      pgtype.Float8 `json:"weight_kg"`
	WeightLb      pgtype.Float8 `json:"weight_lb"`
	Notes         pgtype.Text   `json:"notes"`
}

func (q *Queries) UpdateWeightEntry(ctx context.Context, arg UpdateWeightEntryParams) (Weightentry, error) {
	row := q.db.QueryRow(ctx, updateWeightEntry,
		arg.WeightEntryID,
		arg.UserID,
		arg.EntryDate,
		arg.WeightKg,
		arg.WeightLb,
		arg.Notes,
	)
	var i Weightentry
	err := row.Scan(
		&i.WeightEntryID,
		&i.UserID,
		&i.EntryDate,
		&i.WeightKg,
		&i.WeightLb,
		&i.Notes,
	)
	return i, err
}
