// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: WorkoutPlan.sql

package db

import (
	"context"
	"time"
)

const createPlan = `-- name: CreatePlan :one
INSERT INTO WorkoutPlan (
  username, 
  plan_name,
  description,
  start_date,
  end_date,
  goal,
  difficulty,
  is_public
  )
VALUES ($1, $2, $3, $4,$5,$6,$7,$8)
RETURNING plan_id, username, plan_name, description, start_date, end_date, goal, difficulty, is_public, created_at
`

type CreatePlanParams struct {
	Username    string          `json:"username"`
	PlanName    string          `json:"plan_name"`
	Description string          `json:"description"`
	StartDate   time.Time       `json:"start_date"`
	EndDate     time.Time       `json:"end_date"`
	Goal        Workoutgoalenum `json:"goal"`
	Difficulty  Difficulty      `json:"difficulty"`
	IsPublic    Visibility      `json:"is_public"`
}

func (q *Queries) CreatePlan(ctx context.Context, arg CreatePlanParams) (Workoutplan, error) {
	row := q.db.QueryRow(ctx, createPlan,
		arg.Username,
		arg.PlanName,
		arg.Description,
		arg.StartDate,
		arg.EndDate,
		arg.Goal,
		arg.Difficulty,
		arg.IsPublic,
	)
	var i Workoutplan
	err := row.Scan(
		&i.PlanID,
		&i.Username,
		&i.PlanName,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.Goal,
		&i.Difficulty,
		&i.IsPublic,
		&i.CreatedAt,
	)
	return i, err
}

const deletePlan = `-- name: DeletePlan :exec
DELETE FROM WorkoutPlan
WHERE plan_id = $1 AND username =$2
`

type DeletePlanParams struct {
	PlanID   int64  `json:"plan_id"`
	Username string `json:"username"`
}

func (q *Queries) DeletePlan(ctx context.Context, arg DeletePlanParams) error {
	_, err := q.db.Exec(ctx, deletePlan, arg.PlanID, arg.Username)
	return err
}

const getPlan = `-- name: GetPlan :one
SELECT plan_id, username, plan_name, description, start_date, end_date, goal, difficulty, is_public, created_at
FROM WorkoutPlan
WHERE plan_id = $1 AND username = $2
`

type GetPlanParams struct {
	PlanID   int64  `json:"plan_id"`
	Username string `json:"username"`
}

func (q *Queries) GetPlan(ctx context.Context, arg GetPlanParams) (Workoutplan, error) {
	row := q.db.QueryRow(ctx, getPlan, arg.PlanID, arg.Username)
	var i Workoutplan
	err := row.Scan(
		&i.PlanID,
		&i.Username,
		&i.PlanName,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.Goal,
		&i.Difficulty,
		&i.IsPublic,
		&i.CreatedAt,
	)
	return i, err
}

const updatePlan = `-- name: UpdatePlan :one
UPDATE WorkoutPlan
SET 
plan_name = $3, 
description = $4,
start_date = $5,
end_date = $6,
goal = $7,
difficulty = $8,
is_public = $9
WHERE plan_id = $1 AND username = $2
RETURNING plan_id, username, plan_name, description, start_date, end_date, goal, difficulty, is_public, created_at
`

type UpdatePlanParams struct {
	PlanID      int64           `json:"plan_id"`
	Username    string          `json:"username"`
	PlanName    string          `json:"plan_name"`
	Description string          `json:"description"`
	StartDate   time.Time       `json:"start_date"`
	EndDate     time.Time       `json:"end_date"`
	Goal        Workoutgoalenum `json:"goal"`
	Difficulty  Difficulty      `json:"difficulty"`
	IsPublic    Visibility      `json:"is_public"`
}

func (q *Queries) UpdatePlan(ctx context.Context, arg UpdatePlanParams) (Workoutplan, error) {
	row := q.db.QueryRow(ctx, updatePlan,
		arg.PlanID,
		arg.Username,
		arg.PlanName,
		arg.Description,
		arg.StartDate,
		arg.EndDate,
		arg.Goal,
		arg.Difficulty,
		arg.IsPublic,
	)
	var i Workoutplan
	err := row.Scan(
		&i.PlanID,
		&i.Username,
		&i.PlanName,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.Goal,
		&i.Difficulty,
		&i.IsPublic,
		&i.CreatedAt,
	)
	return i, err
}
