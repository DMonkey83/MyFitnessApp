// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: MaxWeightGoal.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMaxWeightGoal = `-- name: CreateMaxWeightGoal :one
INSERT INTO MaxWeightGoal (user_id, exercise_id, goal_weight, notes)
VALUES ($1, $2, $3, $4)
RETURNING goal_id
`

type CreateMaxWeightGoalParams struct {
	UserID     int64       `json:"user_id"`
	ExerciseID int64       `json:"exercise_id"`
	GoalWeight float64     `json:"goal_weight"`
	Notes      pgtype.Text `json:"notes"`
}

func (q *Queries) CreateMaxWeightGoal(ctx context.Context, arg CreateMaxWeightGoalParams) (int64, error) {
	row := q.db.QueryRow(ctx, createMaxWeightGoal,
		arg.UserID,
		arg.ExerciseID,
		arg.GoalWeight,
		arg.Notes,
	)
	var goal_id int64
	err := row.Scan(&goal_id)
	return goal_id, err
}

const deleteWeightRepGoal = `-- name: DeleteWeightRepGoal :exec
DELETE FROM MaxWeightGoal
WHERE goal_id = $1
`

func (q *Queries) DeleteWeightRepGoal(ctx context.Context, goalID int64) error {
	_, err := q.db.Exec(ctx, deleteWeightRepGoal, goalID)
	return err
}

const getMaxWeightGoal = `-- name: GetMaxWeightGoal :one
SELECT goal_id, user_id, exercise_id, goal_weight, notes
FROM MaxWeightGoal
WHERE goal_id = $1
`

func (q *Queries) GetMaxWeightGoal(ctx context.Context, goalID int64) (Maxweightgoal, error) {
	row := q.db.QueryRow(ctx, getMaxWeightGoal, goalID)
	var i Maxweightgoal
	err := row.Scan(
		&i.GoalID,
		&i.UserID,
		&i.ExerciseID,
		&i.GoalWeight,
		&i.Notes,
	)
	return i, err
}

const listMaxWeightGoals = `-- name: ListMaxWeightGoals :many
SELECT goal_weight, notes
FROM MaxWeightGoal
ORDER BY goal_id -- You can change the ORDER BY clause to order by a different column if needed
LIMIT $1
OFFSET $2
`

type ListMaxWeightGoalsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListMaxWeightGoalsRow struct {
	GoalWeight float64     `json:"goal_weight"`
	Notes      pgtype.Text `json:"notes"`
}

func (q *Queries) ListMaxWeightGoals(ctx context.Context, arg ListMaxWeightGoalsParams) ([]ListMaxWeightGoalsRow, error) {
	rows, err := q.db.Query(ctx, listMaxWeightGoals, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListMaxWeightGoalsRow{}
	for rows.Next() {
		var i ListMaxWeightGoalsRow
		if err := rows.Scan(&i.GoalWeight, &i.Notes); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMaxWeightGoal = `-- name: UpdateMaxWeightGoal :one
UPDATE MaxWeightGoal
SET user_id = $2, exercise_id = $3, goal_weight = $4, notes = $5
WHERE goal_id = $1
RETURNING goal_id, user_id, exercise_id, goal_weight, notes
`

type UpdateMaxWeightGoalParams struct {
	GoalID     int64       `json:"goal_id"`
	UserID     int64       `json:"user_id"`
	ExerciseID int64       `json:"exercise_id"`
	GoalWeight float64     `json:"goal_weight"`
	Notes      pgtype.Text `json:"notes"`
}

func (q *Queries) UpdateMaxWeightGoal(ctx context.Context, arg UpdateMaxWeightGoalParams) (Maxweightgoal, error) {
	row := q.db.QueryRow(ctx, updateMaxWeightGoal,
		arg.GoalID,
		arg.UserID,
		arg.ExerciseID,
		arg.GoalWeight,
		arg.Notes,
	)
	var i Maxweightgoal
	err := row.Scan(
		&i.GoalID,
		&i.UserID,
		&i.ExerciseID,
		&i.GoalWeight,
		&i.Notes,
	)
	return i, err
}
