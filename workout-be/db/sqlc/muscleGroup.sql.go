// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: muscleGroup.sql

package db

import (
	"context"
)

const createMuscleGroup = `-- name: CreateMuscleGroup :one
INSERT INTO MuscleGroup (muscle_group_name)
VALUES ($1)
RETURNING muscle_group_id
`

func (q *Queries) CreateMuscleGroup(ctx context.Context, muscleGroupName string) (int64, error) {
	row := q.db.QueryRow(ctx, createMuscleGroup, muscleGroupName)
	var muscle_group_id int64
	err := row.Scan(&muscle_group_id)
	return muscle_group_id, err
}

const deleteMuscleGroup = `-- name: DeleteMuscleGroup :exec
DELETE FROM MuscleGroup
WHERE muscle_group_id = $1
`

func (q *Queries) DeleteMuscleGroup(ctx context.Context, muscleGroupID int64) error {
	_, err := q.db.Exec(ctx, deleteMuscleGroup, muscleGroupID)
	return err
}

const getMuscleGroup = `-- name: GetMuscleGroup :one
SELECT muscle_group_id, muscle_group_name
FROM MuscleGroup
WHERE muscle_group_id = $1
`

func (q *Queries) GetMuscleGroup(ctx context.Context, muscleGroupID int64) (Musclegroup, error) {
	row := q.db.QueryRow(ctx, getMuscleGroup, muscleGroupID)
	var i Musclegroup
	err := row.Scan(&i.MuscleGroupID, &i.MuscleGroupName)
	return i, err
}

const listMuscleGroups = `-- name: ListMuscleGroups :many
SELECT muscle_group_id, muscle_group_name
FROM MuscleGroup
ORDER BY muscle_group_name -- You can change the ORDER BY clause to order by a different column if needed
LIMIT $1
OFFSET $2
`

type ListMuscleGroupsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListMuscleGroups(ctx context.Context, arg ListMuscleGroupsParams) ([]Musclegroup, error) {
	rows, err := q.db.Query(ctx, listMuscleGroups, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Musclegroup{}
	for rows.Next() {
		var i Musclegroup
		if err := rows.Scan(&i.MuscleGroupID, &i.MuscleGroupName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMuscleGroup = `-- name: UpdateMuscleGroup :one
UPDATE MuscleGroup
SET muscle_group_name = $2
WHERE muscle_group_id = $1
RETURNING muscle_group_id, muscle_group_name
`

type UpdateMuscleGroupParams struct {
	MuscleGroupID   int64  `json:"muscle_group_id"`
	MuscleGroupName string `json:"muscle_group_name"`
}

func (q *Queries) UpdateMuscleGroup(ctx context.Context, arg UpdateMuscleGroupParams) (Musclegroup, error) {
	row := q.db.QueryRow(ctx, updateMuscleGroup, arg.MuscleGroupID, arg.MuscleGroupName)
	var i Musclegroup
	err := row.Scan(&i.MuscleGroupID, &i.MuscleGroupName)
	return i, err
}
