// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: MaxRepGoal.sql

package db

import (
	"context"
)

const createMaxRepGoal = `-- name: CreateMaxRepGoal :one
INSERT INTO MaxRepGoal (username, exercise_name, goal_reps, notes)
VALUES ($1, $2, $3, $4)
RETURNING goal_id, username, exercise_name, goal_reps, notes, created_at
`

type CreateMaxRepGoalParams struct {
	Username     string `json:"username"`
	ExerciseName string `json:"exercise_name"`
	GoalReps     int32  `json:"goal_reps"`
	Notes        string `json:"notes"`
}

func (q *Queries) CreateMaxRepGoal(ctx context.Context, arg CreateMaxRepGoalParams) (Maxrepgoal, error) {
	row := q.db.QueryRow(ctx, createMaxRepGoal,
		arg.Username,
		arg.ExerciseName,
		arg.GoalReps,
		arg.Notes,
	)
	var i Maxrepgoal
	err := row.Scan(
		&i.GoalID,
		&i.Username,
		&i.ExerciseName,
		&i.GoalReps,
		&i.Notes,
		&i.CreatedAt,
	)
	return i, err
}

const deleteMaxRepGoal = `-- name: DeleteMaxRepGoal :exec
DELETE FROM MaxRepGoal
WHERE exercise_name = $1 AND username = $2 AND goal_id = $3
`

type DeleteMaxRepGoalParams struct {
	ExerciseName string `json:"exercise_name"`
	Username     string `json:"username"`
	GoalID       int64  `json:"goal_id"`
}

func (q *Queries) DeleteMaxRepGoal(ctx context.Context, arg DeleteMaxRepGoalParams) error {
	_, err := q.db.Exec(ctx, deleteMaxRepGoal, arg.ExerciseName, arg.Username, arg.GoalID)
	return err
}

const getMaxRepGoal = `-- name: GetMaxRepGoal :one
SELECT goal_id, username, exercise_name, goal_reps, notes, created_at
FROM MaxRepGoal
WHERE exercise_name = $1 AND username = $2 AND goal_id = $3
`

type GetMaxRepGoalParams struct {
	ExerciseName string `json:"exercise_name"`
	Username     string `json:"username"`
	GoalID       int64  `json:"goal_id"`
}

func (q *Queries) GetMaxRepGoal(ctx context.Context, arg GetMaxRepGoalParams) (Maxrepgoal, error) {
	row := q.db.QueryRow(ctx, getMaxRepGoal, arg.ExerciseName, arg.Username, arg.GoalID)
	var i Maxrepgoal
	err := row.Scan(
		&i.GoalID,
		&i.Username,
		&i.ExerciseName,
		&i.GoalReps,
		&i.Notes,
		&i.CreatedAt,
	)
	return i, err
}

const listMaxRepGoals = `-- name: ListMaxRepGoals :many
SELECT goal_id, username, exercise_name, goal_reps, notes, created_at
FROM MaxRepGoal
WHERE exercise_name = $1 AND username = $2 AND goal_id = $3
ORDER BY goal_id -- You can change the ORDER BY clause to order by a different column if needed
LIMIT $3
OFFSET $4
`

type ListMaxRepGoalsParams struct {
	ExerciseName string `json:"exercise_name"`
	Username     string `json:"username"`
	Limit        int32  `json:"limit"`
	Offset       int32  `json:"offset"`
}

func (q *Queries) ListMaxRepGoals(ctx context.Context, arg ListMaxRepGoalsParams) ([]Maxrepgoal, error) {
	rows, err := q.db.Query(ctx, listMaxRepGoals,
		arg.ExerciseName,
		arg.Username,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Maxrepgoal{}
	for rows.Next() {
		var i Maxrepgoal
		if err := rows.Scan(
			&i.GoalID,
			&i.Username,
			&i.ExerciseName,
			&i.GoalReps,
			&i.Notes,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMaxRepGoal = `-- name: UpdateMaxRepGoal :one
UPDATE MaxRepGoal
SET goal_reps = $4, notes = $5
WHERE exercise_name = $1 AND username = $2 AND goal_id = $3
RETURNING goal_id, username, exercise_name, goal_reps, notes, created_at
`

type UpdateMaxRepGoalParams struct {
	ExerciseName string `json:"exercise_name"`
	Username     string `json:"username"`
	GoalID       int64  `json:"goal_id"`
	GoalReps     int32  `json:"goal_reps"`
	Notes        string `json:"notes"`
}

func (q *Queries) UpdateMaxRepGoal(ctx context.Context, arg UpdateMaxRepGoalParams) (Maxrepgoal, error) {
	row := q.db.QueryRow(ctx, updateMaxRepGoal,
		arg.ExerciseName,
		arg.Username,
		arg.GoalID,
		arg.GoalReps,
		arg.Notes,
	)
	var i Maxrepgoal
	err := row.Scan(
		&i.GoalID,
		&i.Username,
		&i.ExerciseName,
		&i.GoalReps,
		&i.Notes,
		&i.CreatedAt,
	)
	return i, err
}
