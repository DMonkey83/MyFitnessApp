// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: MaxRepGoal.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMaxRepGoal = `-- name: CreateMaxRepGoal :one
INSERT INTO MaxRepGoal (user_id, exercise_id, goal_reps, notes)
VALUES ($1, $2, $3, $4)
RETURNING goal_id
`

type CreateMaxRepGoalParams struct {
	UserID     int64       `json:"user_id"`
	ExerciseID int64       `json:"exercise_id"`
	GoalReps   int32       `json:"goal_reps"`
	Notes      pgtype.Text `json:"notes"`
}

func (q *Queries) CreateMaxRepGoal(ctx context.Context, arg CreateMaxRepGoalParams) (int64, error) {
	row := q.db.QueryRow(ctx, createMaxRepGoal,
		arg.UserID,
		arg.ExerciseID,
		arg.GoalReps,
		arg.Notes,
	)
	var goal_id int64
	err := row.Scan(&goal_id)
	return goal_id, err
}

const deleteMaxRepGoal = `-- name: DeleteMaxRepGoal :exec
DELETE FROM MaxRepGoal
WHERE goal_id = $1
`

func (q *Queries) DeleteMaxRepGoal(ctx context.Context, goalID int64) error {
	_, err := q.db.Exec(ctx, deleteMaxRepGoal, goalID)
	return err
}

const getMaxRepGoal = `-- name: GetMaxRepGoal :one
SELECT goal_id, user_id, exercise_id, goal_reps, notes
FROM MaxRepGoal
WHERE goal_id = $1
`

func (q *Queries) GetMaxRepGoal(ctx context.Context, goalID int64) (Maxrepgoal, error) {
	row := q.db.QueryRow(ctx, getMaxRepGoal, goalID)
	var i Maxrepgoal
	err := row.Scan(
		&i.GoalID,
		&i.UserID,
		&i.ExerciseID,
		&i.GoalReps,
		&i.Notes,
	)
	return i, err
}

const listMaxRepGoals = `-- name: ListMaxRepGoals :many
SELECT goal_reps, notes
FROM MaxRepGoal
ORDER BY goal_id -- You can change the ORDER BY clause to order by a different column if needed
LIMIT $1
OFFSET $2
`

type ListMaxRepGoalsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListMaxRepGoalsRow struct {
	GoalReps int32       `json:"goal_reps"`
	Notes    pgtype.Text `json:"notes"`
}

func (q *Queries) ListMaxRepGoals(ctx context.Context, arg ListMaxRepGoalsParams) ([]ListMaxRepGoalsRow, error) {
	rows, err := q.db.Query(ctx, listMaxRepGoals, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListMaxRepGoalsRow{}
	for rows.Next() {
		var i ListMaxRepGoalsRow
		if err := rows.Scan(&i.GoalReps, &i.Notes); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMaxRepGoal = `-- name: UpdateMaxRepGoal :one
UPDATE MaxRepGoal
SET user_id = $2, exercise_id = $3, goal_reps = $4, notes = $5
WHERE goal_id = $1
RETURNING goal_id, user_id, exercise_id, goal_reps, notes
`

type UpdateMaxRepGoalParams struct {
	GoalID     int64       `json:"goal_id"`
	UserID     int64       `json:"user_id"`
	ExerciseID int64       `json:"exercise_id"`
	GoalReps   int32       `json:"goal_reps"`
	Notes      pgtype.Text `json:"notes"`
}

func (q *Queries) UpdateMaxRepGoal(ctx context.Context, arg UpdateMaxRepGoalParams) (Maxrepgoal, error) {
	row := q.db.QueryRow(ctx, updateMaxRepGoal,
		arg.GoalID,
		arg.UserID,
		arg.ExerciseID,
		arg.GoalReps,
		arg.Notes,
	)
	var i Maxrepgoal
	err := row.Scan(
		&i.GoalID,
		&i.UserID,
		&i.ExerciseID,
		&i.GoalReps,
		&i.Notes,
	)
	return i, err
}
