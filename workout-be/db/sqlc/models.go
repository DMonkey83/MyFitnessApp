// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1

package db

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type Completionenum string

const (
	CompletionenumCompleted  Completionenum = "Completed"
	CompletionenumIncomplete Completionenum = "Incomplete"
	CompletionenumNotStarted Completionenum = "NotStarted"
)

func (e *Completionenum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Completionenum(s)
	case string:
		*e = Completionenum(s)
	default:
		return fmt.Errorf("unsupported scan type for Completionenum: %T", src)
	}
	return nil
}

type NullCompletionenum struct {
	Completionenum Completionenum `json:"completionenum"`
	Valid          bool           `json:"valid"` // Valid is true if Completionenum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCompletionenum) Scan(value interface{}) error {
	if value == nil {
		ns.Completionenum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Completionenum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCompletionenum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Completionenum), nil
}

type Equipmenttype string

const (
	EquipmenttypeBarbell    Equipmenttype = "Barbell"
	EquipmenttypeDumbbell   Equipmenttype = "Dumbbell"
	EquipmenttypeMachine    Equipmenttype = "Machine"
	EquipmenttypeBodyweight Equipmenttype = "Bodyweight"
	EquipmenttypeOther      Equipmenttype = "Other"
)

func (e *Equipmenttype) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Equipmenttype(s)
	case string:
		*e = Equipmenttype(s)
	default:
		return fmt.Errorf("unsupported scan type for Equipmenttype: %T", src)
	}
	return nil
}

type NullEquipmenttype struct {
	Equipmenttype Equipmenttype `json:"equipmenttype"`
	Valid         bool          `json:"valid"` // Valid is true if Equipmenttype is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEquipmenttype) Scan(value interface{}) error {
	if value == nil {
		ns.Equipmenttype, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Equipmenttype.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEquipmenttype) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Equipmenttype), nil
}

type Musclegroupenum string

const (
	MusclegroupenumChest     Musclegroupenum = "Chest"
	MusclegroupenumBack      Musclegroupenum = "Back"
	MusclegroupenumLegs      Musclegroupenum = "Legs"
	MusclegroupenumShoulders Musclegroupenum = "Shoulders"
	MusclegroupenumArms      Musclegroupenum = "Arms"
	MusclegroupenumAbs       Musclegroupenum = "Abs"
	MusclegroupenumCardio    Musclegroupenum = "Cardio"
)

func (e *Musclegroupenum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Musclegroupenum(s)
	case string:
		*e = Musclegroupenum(s)
	default:
		return fmt.Errorf("unsupported scan type for Musclegroupenum: %T", src)
	}
	return nil
}

type NullMusclegroupenum struct {
	Musclegroupenum Musclegroupenum `json:"musclegroupenum"`
	Valid           bool            `json:"valid"` // Valid is true if Musclegroupenum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMusclegroupenum) Scan(value interface{}) error {
	if value == nil {
		ns.Musclegroupenum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Musclegroupenum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMusclegroupenum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Musclegroupenum), nil
}

type Weightunit string

const (
	WeightunitKg Weightunit = "kg"
	WeightunitLb Weightunit = "lb"
)

func (e *Weightunit) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Weightunit(s)
	case string:
		*e = Weightunit(s)
	default:
		return fmt.Errorf("unsupported scan type for Weightunit: %T", src)
	}
	return nil
}

type NullWeightunit struct {
	Weightunit Weightunit `json:"weightunit"`
	Valid      bool       `json:"valid"` // Valid is true if Weightunit is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullWeightunit) Scan(value interface{}) error {
	if value == nil {
		ns.Weightunit, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Weightunit.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullWeightunit) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Weightunit), nil
}

type Equipment struct {
	EquipmentName string        `json:"equipment_name"`
	Description   string        `json:"description"`
	EquipmentType Equipmenttype `json:"equipment_type"`
	CreatedAt     time.Time     `json:"created_at"`
}

type Exercise struct {
	ExerciseID      int64           `json:"exercise_id"`
	WorkoutID       int64           `json:"workout_id"`
	EquipmentName   string          `json:"equipment_name"`
	ExerciseName    string          `json:"exercise_name"`
	Description     string          `json:"description"`
	MuscleGroupName Musclegroupenum `json:"muscle_group_name"`
	CreatedAt       time.Time       `json:"created_at"`
}

type Maxrepgoal struct {
	GoalID     int64     `json:"goal_id"`
	Username   string    `json:"username"`
	ExerciseID int64     `json:"exercise_id"`
	GoalReps   int32     `json:"goal_reps"`
	Notes      string    `json:"notes"`
	CreatedAt  time.Time `json:"created_at"`
}

type Maxweightgoal struct {
	GoalID     int64     `json:"goal_id"`
	Username   string    `json:"username"`
	ExerciseID int64     `json:"exercise_id"`
	GoalWeight int32     `json:"goal_weight"`
	Notes      string    `json:"notes"`
	CreatedAt  time.Time `json:"created_at"`
}

type Rep struct {
	RepID            int64          `json:"rep_id"`
	SetID            int64          `json:"set_id"`
	RepNumber        int32          `json:"rep_number"`
	CompletionStatus Completionenum `json:"completion_status"`
	Notes            string         `json:"notes"`
	CreatedAt        time.Time      `json:"created_at"`
}

type Set struct {
	SetID        int64     `json:"set_id"`
	ExerciseID   int64     `json:"exercise_id"`
	SetNumber    int32     `json:"set_number"`
	Weight       int32     `json:"weight"`
	RestDuration string    `json:"rest_duration"`
	Notes        string    `json:"notes"`
	CreatedAt    time.Time `json:"created_at"`
}

type User struct {
	Username          string    `json:"username"`
	Email             string    `json:"email"`
	PasswordHash      string    `json:"password_hash"`
	PasswordChangedAt time.Time `json:"password_changed_at"`
	CreatedAt         time.Time `json:"created_at"`
}

type Userprofile struct {
	UserProfileID int64      `json:"user_profile_id"`
	Username      string     `json:"username"`
	FullName      string     `json:"full_name"`
	Age           int32      `json:"age"`
	Gender        string     `json:"gender"`
	HeightCm      int32      `json:"height_cm"`
	HeightFtIn    string     `json:"height_ft_in"`
	PreferredUnit Weightunit `json:"preferred_unit"`
	CreatedAt     time.Time  `json:"created_at"`
}

type Weightentry struct {
	WeightEntryID int64     `json:"weight_entry_id"`
	Username      string    `json:"username"`
	EntryDate     time.Time `json:"entry_date"`
	WeightKg      int32     `json:"weight_kg"`
	WeightLb      int32     `json:"weight_lb"`
	Notes         string    `json:"notes"`
	CreatedAt     time.Time `json:"created_at"`
}

type Workout struct {
	WorkoutID       int64     `json:"workout_id"`
	Username        string    `json:"username"`
	WorkoutDate     time.Time `json:"workout_date"`
	WorkoutDuration string    `json:"workout_duration"`
	Notes           string    `json:"notes"`
	CreatedAt       time.Time `json:"created_at"`
}
