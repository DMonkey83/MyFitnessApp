// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type Equipmenttype string

const (
	EquipmenttypeBarbell    Equipmenttype = "Barbell"
	EquipmenttypeDumbbell   Equipmenttype = "Dumbbell"
	EquipmenttypeMachine    Equipmenttype = "Machine"
	EquipmenttypeBodyweight Equipmenttype = "Bodyweight"
	EquipmenttypeOther      Equipmenttype = "Other"
)

func (e *Equipmenttype) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Equipmenttype(s)
	case string:
		*e = Equipmenttype(s)
	default:
		return fmt.Errorf("unsupported scan type for Equipmenttype: %T", src)
	}
	return nil
}

type NullEquipmenttype struct {
	Equipmenttype Equipmenttype `json:"equipmenttype"`
	Valid         bool          `json:"valid"` // Valid is true if Equipmenttype is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEquipmenttype) Scan(value interface{}) error {
	if value == nil {
		ns.Equipmenttype, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Equipmenttype.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEquipmenttype) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Equipmenttype), nil
}

type MuscleGroupEnum string

const (
	MuscleGroupEnumChest     MuscleGroupEnum = "Chest"
	MuscleGroupEnumBack      MuscleGroupEnum = "Back"
	MuscleGroupEnumLegs      MuscleGroupEnum = "Legs"
	MuscleGroupEnumShoulders MuscleGroupEnum = "Shoulders"
	MuscleGroupEnumArms      MuscleGroupEnum = "Arms"
	MuscleGroupEnumAbs       MuscleGroupEnum = "Abs"
	MuscleGroupEnumCardio    MuscleGroupEnum = "Cardio"
)

func (e *MuscleGroupEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MuscleGroupEnum(s)
	case string:
		*e = MuscleGroupEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for MuscleGroupEnum: %T", src)
	}
	return nil
}

type NullMuscleGroupEnum struct {
	MuscleGroupEnum MuscleGroupEnum `json:"muscle_group_enum"`
	Valid           bool            `json:"valid"` // Valid is true if MuscleGroupEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMuscleGroupEnum) Scan(value interface{}) error {
	if value == nil {
		ns.MuscleGroupEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MuscleGroupEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMuscleGroupEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MuscleGroupEnum), nil
}

type Weightunit string

const (
	WeightunitKg Weightunit = "kg"
	WeightunitLb Weightunit = "lb"
)

func (e *Weightunit) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Weightunit(s)
	case string:
		*e = Weightunit(s)
	default:
		return fmt.Errorf("unsupported scan type for Weightunit: %T", src)
	}
	return nil
}

type NullWeightunit struct {
	Weightunit Weightunit `json:"weightunit"`
	Valid      bool       `json:"valid"` // Valid is true if Weightunit is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullWeightunit) Scan(value interface{}) error {
	if value == nil {
		ns.Weightunit, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Weightunit.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullWeightunit) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Weightunit), nil
}

type Equipment struct {
	EquipmentID   int64         `json:"equipment_id"`
	EquipmentName string        `json:"equipment_name"`
	Description   pgtype.Text   `json:"description"`
	EquipmentType Equipmenttype `json:"equipment_type"`
}

type Exercise struct {
	ExerciseID   int64           `json:"exercise_id"`
	ExerciseName string          `json:"exercise_name"`
	MuscleGroup  MuscleGroupEnum `json:"muscle_group"`
	Description  pgtype.Text     `json:"description"`
	EquipmentID  pgtype.Int8     `json:"equipment_id"`
}

type Maxrepgoal struct {
	GoalID     int64       `json:"goal_id"`
	UserID     int64       `json:"user_id"`
	ExerciseID int64       `json:"exercise_id"`
	GoalReps   int32       `json:"goal_reps"`
	Notes      pgtype.Text `json:"notes"`
}

type Maxweightgoal struct {
	GoalID     int64       `json:"goal_id"`
	UserID     int64       `json:"user_id"`
	ExerciseID int64       `json:"exercise_id"`
	GoalWeight float64     `json:"goal_weight"`
	Notes      pgtype.Text `json:"notes"`
}

type Musclegroup struct {
	MuscleGroupID   int64  `json:"muscle_group_id"`
	MuscleGroupName string `json:"muscle_group_name"`
}

type Programworkout struct {
	ProgramWorkoutID int64       `json:"program_workout_id"`
	ProgramID        int64       `json:"program_id"`
	WorkoutID        int64       `json:"workout_id"`
	DayOfWeek        int32       `json:"day_of_week"`
	Notes            pgtype.Text `json:"notes"`
}

type Rep struct {
	RepID     int64       `json:"rep_id"`
	SetID     int64       `json:"set_id"`
	RepNumber int32       `json:"rep_number"`
	Completed pgtype.Bool `json:"completed"`
	Notes     pgtype.Text `json:"notes"`
}

type Set struct {
	SetID        int64           `json:"set_id"`
	WorkoutID    int64           `json:"workout_id"`
	ExerciseID   int64           `json:"exercise_id"`
	SetNumber    int32           `json:"set_number"`
	Weight       pgtype.Float8   `json:"weight"`
	RestDuration pgtype.Interval `json:"rest_duration"`
	Notes        pgtype.Text     `json:"notes"`
}

type User struct {
	UserID       int64            `json:"user_id"`
	Username     string           `json:"username"`
	Email        string           `json:"email"`
	PasswordHash string           `json:"password_hash"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
}

type Userprofile struct {
	UserProfileID int64            `json:"user_profile_id"`
	UserID        int64            `json:"user_id"`
	FullName      string           `json:"full_name"`
	Age           int32            `json:"age"`
	Gender        string           `json:"gender"`
	HeightCm      float64          `json:"height_cm"`
	HeightFtIn    pgtype.Text      `json:"height_ft_in"`
	PreferredUnit Weightunit       `json:"preferred_unit"`
	CreatedAt     pgtype.Timestamp `json:"created_at"`
}

type Weightentry struct {
	WeightEntryID int64         `json:"weight_entry_id"`
	UserID        int64         `json:"user_id"`
	EntryDate     pgtype.Date   `json:"entry_date"`
	WeightKg      pgtype.Float8 `json:"weight_kg"`
	WeightLb      pgtype.Float8 `json:"weight_lb"`
	Notes         pgtype.Text   `json:"notes"`
}

type Workout struct {
	WorkoutID       int64           `json:"workout_id"`
	UserID          int64           `json:"user_id"`
	WorkoutDate     pgtype.Date     `json:"workout_date"`
	WorkoutDuration pgtype.Interval `json:"workout_duration"`
	Notes           pgtype.Text     `json:"notes"`
}

type Workoutprogram struct {
	ProgramID   int64       `json:"program_id"`
	UserID      int64       `json:"user_id"`
	ProgramName string      `json:"program_name"`
	Description pgtype.Text `json:"description"`
}
