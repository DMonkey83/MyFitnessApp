// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: OneOffWorkoutExercise.sql

package db

import (
	"context"
)

const createOneOffWorkoutExercise = `-- name: CreateOneOffWorkoutExercise :one
INSERT INTO OneOffWorkoutExercise (
  workout_id,
  exercise_name,
  description,
  muscle_group_name
  )
VALUES ($1, $2, $3, $4)
RETURNING id, workout_id, exercise_name, description, muscle_group_name, created_at
`

type CreateOneOffWorkoutExerciseParams struct {
	WorkoutID       int64           `json:"workout_id"`
	ExerciseName    string          `json:"exercise_name"`
	Description     string          `json:"description"`
	MuscleGroupName Musclegroupenum `json:"muscle_group_name"`
}

func (q *Queries) CreateOneOffWorkoutExercise(ctx context.Context, arg CreateOneOffWorkoutExerciseParams) (Oneoffworkoutexercise, error) {
	row := q.db.QueryRow(ctx, createOneOffWorkoutExercise,
		arg.WorkoutID,
		arg.ExerciseName,
		arg.Description,
		arg.MuscleGroupName,
	)
	var i Oneoffworkoutexercise
	err := row.Scan(
		&i.ID,
		&i.WorkoutID,
		&i.ExerciseName,
		&i.Description,
		&i.MuscleGroupName,
		&i.CreatedAt,
	)
	return i, err
}

const deleteOneOffWorkoutExercise = `-- name: DeleteOneOffWorkoutExercise :exec
DELETE FROM OneOffWorkoutExercise
WHERE id = $1 AND workout_id = $2
`

type DeleteOneOffWorkoutExerciseParams struct {
	ID        int32 `json:"id"`
	WorkoutID int64 `json:"workout_id"`
}

func (q *Queries) DeleteOneOffWorkoutExercise(ctx context.Context, arg DeleteOneOffWorkoutExerciseParams) error {
	_, err := q.db.Exec(ctx, deleteOneOffWorkoutExercise, arg.ID, arg.WorkoutID)
	return err
}

const getOneOffWorkoutExercise = `-- name: GetOneOffWorkoutExercise :one
SELECT id, workout_id, exercise_name, description, muscle_group_name, created_at
FROM OneOffWorkoutExercise
WHERE id = $1 AND workout_id = $2
`

type GetOneOffWorkoutExerciseParams struct {
	ID        int32 `json:"id"`
	WorkoutID int64 `json:"workout_id"`
}

func (q *Queries) GetOneOffWorkoutExercise(ctx context.Context, arg GetOneOffWorkoutExerciseParams) (Oneoffworkoutexercise, error) {
	row := q.db.QueryRow(ctx, getOneOffWorkoutExercise, arg.ID, arg.WorkoutID)
	var i Oneoffworkoutexercise
	err := row.Scan(
		&i.ID,
		&i.WorkoutID,
		&i.ExerciseName,
		&i.Description,
		&i.MuscleGroupName,
		&i.CreatedAt,
	)
	return i, err
}

const listAllOneOffWorkoutExercises = `-- name: ListAllOneOffWorkoutExercises :many
SELECT id, workout_id, exercise_name, description, muscle_group_name, created_at
FROM OneOffWorkoutExercise
WHERE workout_id = $1
ORDER BY exercise_name -- You can change the ORDER BY clause to order by a different column if needed
LIMIT $2
OFFSET $3
`

type ListAllOneOffWorkoutExercisesParams struct {
	WorkoutID int64 `json:"workout_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListAllOneOffWorkoutExercises(ctx context.Context, arg ListAllOneOffWorkoutExercisesParams) ([]Oneoffworkoutexercise, error) {
	rows, err := q.db.Query(ctx, listAllOneOffWorkoutExercises, arg.WorkoutID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Oneoffworkoutexercise{}
	for rows.Next() {
		var i Oneoffworkoutexercise
		if err := rows.Scan(
			&i.ID,
			&i.WorkoutID,
			&i.ExerciseName,
			&i.Description,
			&i.MuscleGroupName,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOneOffWorkoutExercise = `-- name: UpdateOneOffWorkoutExercise :one
UPDATE OneOffWorkoutExercise
SET description = $3, muscle_group_name = $4
WHERE id = $1 AND workout_id = $2
RETURNING id, workout_id, exercise_name, description, muscle_group_name, created_at
`

type UpdateOneOffWorkoutExerciseParams struct {
	ID              int32           `json:"id"`
	WorkoutID       int64           `json:"workout_id"`
	Description     string          `json:"description"`
	MuscleGroupName Musclegroupenum `json:"muscle_group_name"`
}

func (q *Queries) UpdateOneOffWorkoutExercise(ctx context.Context, arg UpdateOneOffWorkoutExerciseParams) (Oneoffworkoutexercise, error) {
	row := q.db.QueryRow(ctx, updateOneOffWorkoutExercise,
		arg.ID,
		arg.WorkoutID,
		arg.Description,
		arg.MuscleGroupName,
	)
	var i Oneoffworkoutexercise
	err := row.Scan(
		&i.ID,
		&i.WorkoutID,
		&i.ExerciseName,
		&i.Description,
		&i.MuscleGroupName,
		&i.CreatedAt,
	)
	return i, err
}
